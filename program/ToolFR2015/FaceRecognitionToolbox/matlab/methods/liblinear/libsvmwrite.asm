; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EA@LIPPHCNI@Usage?3?5libsvmwrite?$CI?8filename?8?0?5l@ ; `string'
PUBLIC	exit_with_help
EXTRN	mexPrintf:PROC
;	COMDAT ??_C@_0EA@LIPPHCNI@Usage?3?5libsvmwrite?$CI?8filename?8?0?5l@
; File c:\users\brian c. becker\downloads\liblinear-1.7\liblinear-1.7\matlab\libsvmwrite.c
CONST	SEGMENT
??_C@_0EA@LIPPHCNI@Usage?3?5libsvmwrite?$CI?8filename?8?0?5l@ DB 'Usage: '
	DB	'libsvmwrite(''filename'', label_vector, instance_matrix);', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT exit_with_help
_TEXT	SEGMENT
exit_with_help PROC					; COMDAT
; Line 14
	lea	rcx, OFFSET FLAT:??_C@_0EA@LIPPHCNI@Usage?3?5libsvmwrite?$CI?8filename?8?0?5l@
; Line 15
	jmp	mexPrintf
exit_with_help ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_07GGAGCLPJ@?5?$CFld?3?$CFg?$AA@		; `string'
PUBLIC	??_C@_02BEIEFPIG@?$CFg?$AA@			; `string'
PUBLIC	??_C@_0DH@OBEGDGFM@Length?5of?5label?5vector?5does?5not?5@ ; `string'
PUBLIC	??_C@_0CJ@CCOPDODI@Error?3?5cannot?5transpose?5instance@ ; `string'
PUBLIC	??_C@_09KDFGPPLL@transpose?$AA@			; `string'
PUBLIC	??_C@_0BL@PEPIKDGK@can?8t?5open?5output?5file?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	libsvmwrite
EXTRN	__imp_fclose:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	mxGetJc_730:PROC
EXTRN	mxGetIr_730:PROC
EXTRN	mxGetPr:PROC
EXTRN	mxGetM:PROC
EXTRN	mxGetN:PROC
EXTRN	mxDestroyArray:PROC
EXTRN	mexCallMATLAB:PROC
EXTRN	mxDuplicateArray:PROC
EXTRN	__imp_fopen:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$libsvmwrite DD imagerel $LN16
	DD	imagerel $LN16+281
	DD	imagerel $unwind$libsvmwrite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$libsvmwrite DD imagerel $LN16+281
	DD	imagerel $LN16+449
	DD	imagerel $chain$3$libsvmwrite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$libsvmwrite DD imagerel $LN16+449
	DD	imagerel $LN16+485
	DD	imagerel $chain$4$libsvmwrite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$libsvmwrite DD 021H
	DD	imagerel $LN16
	DD	imagerel $LN16+281
	DD	imagerel $unwind$libsvmwrite
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$libsvmwrite DD 020521H
	DD	0fd405H
	DD	imagerel $LN16
	DD	imagerel $LN16+281
	DD	imagerel $unwind$libsvmwrite
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$libsvmwrite DD 0be001H
	DD	08f4e0H
	DD	010e4dbH
	DD	0ec4d0H
	DD	070058209H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GGAGCLPJ@?5?$CFld?3?$CFg?$AA@
CONST	SEGMENT
??_C@_07GGAGCLPJ@?5?$CFld?3?$CFg?$AA@ DB ' %ld:%g', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02BEIEFPIG@?$CFg?$AA@
CONST	SEGMENT
??_C@_02BEIEFPIG@?$CFg?$AA@ DB '%g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OBEGDGFM@Length?5of?5label?5vector?5does?5not?5@
CONST	SEGMENT
??_C@_0DH@OBEGDGFM@Length?5of?5label?5vector?5does?5not?5@ DB 'Length of '
	DB	'label vector does not match # of instances.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CCOPDODI@Error?3?5cannot?5transpose?5instance@
CONST	SEGMENT
??_C@_0CJ@CCOPDODI@Error?3?5cannot?5transpose?5instance@ DB 'Error: canno'
	DB	't transpose instance matrix', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KDFGPPLL@transpose?$AA@
CONST	SEGMENT
??_C@_09KDFGPPLL@transpose?$AA@ DB 'transpose', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PEPIKDGK@can?8t?5open?5output?5file?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BL@PEPIKDGK@can?8t?5open?5output?5file?5?$CFs?6?$AA@ DB 'can''t op'
	DB	'en output file %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT libsvmwrite
_TEXT	SEGMENT
plhs$5263 = 48
samples$1$ = 56
filename$ = 112
label_vec$ = 120
instance_mat$ = 128
prhs$5262 = 136
libsvmwrite PROC					; COMDAT
; Line 18
$LN16:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rbp, rdx
; Line 19
	lea	rdx, OFFSET FLAT:??_C@_01NOFIACDB@w?$AA@
	mov	rdi, r8
	mov	rbx, rcx
	call	QWORD PTR __imp_fopen
	mov	rsi, rax
; Line 26
	test	rax, rax
	jne	SHORT $LN9@libsvmwrit
; Line 28
	lea	rcx, OFFSET FLAT:??_C@_0BL@PEPIKDGK@can?8t?5open?5output?5file?5?$CFs?6?$AA@
	mov	rdx, rbx
; Line 74
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	jmp	mexPrintf
$LN9@libsvmwrit:
; Line 35
	mov	rcx, rdi
	call	mxDuplicateArray
; Line 36
	mov	r8d, 1
	lea	r9, QWORD PTR prhs$5262[rsp]
	mov	QWORD PTR prhs$5262[rsp], rax
	lea	rax, OFFSET FLAT:??_C@_09KDFGPPLL@transpose?$AA@
	lea	rdx, QWORD PTR plhs$5263[rsp]
	mov	ecx, r8d
	mov	QWORD PTR [rsp+32], rax
	call	mexCallMATLAB
	test	eax, eax
	je	SHORT $LN8@libsvmwrit
; Line 38
	lea	rcx, OFFSET FLAT:??_C@_0CJ@CCOPDODI@Error?3?5cannot?5transpose?5instance@
	call	mexPrintf
; Line 74
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN8@libsvmwrit:
; Line 42
	mov	rcx, QWORD PTR prhs$5262[rsp]
	mov	rbx, QWORD PTR plhs$5263[rsp]
	call	mxDestroyArray
; Line 46
	mov	rcx, rbx
	call	mxGetN
; Line 47
	mov	rcx, rbp
	mov	rdi, rax
	call	mxGetM
; Line 49
	cmp	eax, edi
	je	SHORT $LN7@libsvmwrit
; Line 51
	lea	rcx, OFFSET FLAT:??_C@_0DH@OBEGDGFM@Length?5of?5label?5vector?5does?5not?5@
; Line 74
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	jmp	mexPrintf
$LN7@libsvmwrit:
	mov	QWORD PTR [rsp+112], r12
; Line 56
	mov	rcx, rbp
	mov	QWORD PTR [rsp+128], r14
	mov	QWORD PTR [rsp+64], r15
	call	mxGetPr
; Line 57
	mov	rcx, rbx
	mov	r15, rax
	call	mxGetPr
; Line 58
	mov	rcx, rbx
	mov	rbp, rax
	mov	QWORD PTR samples$1$[rsp], rax
	call	mxGetIr_730
; Line 59
	mov	rcx, rbx
	mov	r14, rax
	call	mxGetJc_730
; Line 61
	movsxd	r12, edi
	mov	rbx, rax
	test	edi, edi
	jle	$LN4@libsvmwrit
	mov	QWORD PTR [rsp+120], r13
	sub	r15, rax
	npad	15
$LL6@libsvmwrit:
; Line 63
	movsdx	xmm2, QWORD PTR [r15+rbx]
	lea	rdx, OFFSET FLAT:??_C@_02BEIEFPIG@?$CFg?$AA@
	mov	rcx, rsi
	movd	r8, xmm2
	call	QWORD PTR __imp_fprintf
; Line 66
	movsxd	rdi, DWORD PTR [rbx+8]
	movsxd	rax, DWORD PTR [rbx]
	cmp	rax, rdi
	lea	r13, QWORD PTR [rbx+8]
	jge	SHORT $LN1@libsvmwrit
	sub	rbp, r14
	lea	rbx, QWORD PTR [r14+rax*8]
	sub	rdi, rax
	npad	11
$LL3@libsvmwrit:
; Line 67
	movsdx	xmm3, QWORD PTR [rbx+rbp]
	mov	r8, QWORD PTR [rbx]
	lea	rdx, OFFSET FLAT:??_C@_07GGAGCLPJ@?5?$CFld?3?$CFg?$AA@
	inc	r8
	mov	rcx, rsi
	movd	r9, xmm3
	call	QWORD PTR __imp_fprintf
	add	rbx, 8
	sub	rdi, 1
	jne	SHORT $LL3@libsvmwrit
	mov	rbp, QWORD PTR samples$1$[rsp]
$LN1@libsvmwrit:
; Line 69
	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
	mov	rcx, rsi
	call	QWORD PTR __imp_fprintf
	sub	r12, 1
	mov	rbx, r13
	jne	$LL6@libsvmwrit
	mov	r13, QWORD PTR [rsp+120]
$LN4@libsvmwrit:
; Line 72
	mov	rcx, rsi
	mov	r15, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+128]
	mov	r12, QWORD PTR [rsp+112]
; Line 74
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	rex_jmp	QWORD PTR __imp_fclose
libsvmwrite ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DI@DIKPDILO@Error?3?5label?5vector?5and?5instance@ ; `string'
PUBLIC	??_C@_0CA@LEFBHPGO@Instance_matrix?5must?5be?5sparse?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	mexFunction
EXTRN	__GSHandlerCheck:PROC
EXTRN	mxIsSparse:PROC
EXTRN	mxGetString_730:PROC
EXTRN	mxIsDouble:PROC
EXTRN	__security_cookie:QWORD
EXTRN	__security_check_cookie:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mexFunction DD imagerel $LN12
	DD	imagerel $LN12+175
	DD	imagerel $unwind$mexFunction
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mexFunction DD 031b19H
	DD	0260109H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT ??_C@_0DI@DIKPDILO@Error?3?5label?5vector?5and?5instance@
CONST	SEGMENT
??_C@_0DI@DIKPDILO@Error?3?5label?5vector?5and?5instance@ DB 'Error: labe'
	DB	'l vector and instance matrix must be double', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LEFBHPGO@Instance_matrix?5must?5be?5sparse?6?$AA@
CONST	SEGMENT
??_C@_0CA@LEFBHPGO@Instance_matrix?5must?5be?5sparse?6?$AA@ DB 'Instance_'
	DB	'matrix must be sparse', 0aH, 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT mexFunction
_TEXT	SEGMENT
filename$5292 = 32
__$ArrayPad$ = 288
nlhs$ = 320
plhs$ = 328
nrhs$ = 336
prhs$ = 344
mexFunction PROC					; COMDAT
; Line 78
$LN12:
	push	rbx
	sub	rsp, 304				; 00000130H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, r9
; Line 80
	cmp	r8d, 3
	jne	SHORT $LN6@mexFunctio
; Line 83
	mov	rcx, QWORD PTR [r9+8]
	call	mxIsDouble
	test	al, al
	je	SHORT $LN4@mexFunctio
	mov	rcx, QWORD PTR [rbx+16]
	call	mxIsDouble
	test	al, al
	je	SHORT $LN4@mexFunctio
; Line 89
	mov	rcx, QWORD PTR [rbx]
	call	mxGetN
	mov	rcx, QWORD PTR [rbx]
	lea	rdx, QWORD PTR filename$5292[rsp]
	lea	r8, QWORD PTR [rax+1]
	call	mxGetString_730
; Line 91
	mov	rcx, QWORD PTR [rbx+16]
	call	mxIsSparse
	test	al, al
	je	SHORT $LN3@mexFunctio
; Line 92
	mov	r8, QWORD PTR [rbx+16]
	mov	rdx, QWORD PTR [rbx+8]
	lea	rcx, QWORD PTR filename$5292[rsp]
	call	libsvmwrite
; Line 99
	jmp	SHORT $LN1@mexFunctio
$LN3@mexFunctio:
; Line 95
	lea	rcx, OFFSET FLAT:??_C@_0CA@LEFBHPGO@Instance_matrix?5must?5be?5sparse?6?$AA@
; Line 96
	jmp	SHORT $LN11@mexFunctio
$LN4@mexFunctio:
; Line 85
	lea	rcx, OFFSET FLAT:??_C@_0DI@DIKPDILO@Error?3?5label?5vector?5and?5instance@
; Line 86
	jmp	SHORT $LN11@mexFunctio
$LN6@mexFunctio:
; Line 101
	lea	rcx, OFFSET FLAT:??_C@_0EA@LIPPHCNI@Usage?3?5libsvmwrite?$CI?8filename?8?0?5l@
$LN11@mexFunctio:
	call	mexPrintf
$LN1@mexFunctio:
; Line 104
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 304				; 00000130H
	pop	rbx
	ret	0
mexFunction ENDP
_TEXT	ENDS
END
