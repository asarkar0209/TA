; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	__real@3ff0000000000000
PUBLIC	__mask@@AbsDouble@
PUBLIC	dnrm2_
EXTRN	_fltused:DWORD
EXTRN	sqrt:PROC
;	COMDAT pdata
; File c:\users\brian c. becker\downloads\liblinear-1.7\liblinear-1.7\blas\dnrm2.c
pdata	SEGMENT
$pdata$dnrm2_ DD imagerel $LN16
	DD	imagerel $LN16+62
	DD	imagerel $unwind$dnrm2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dnrm2_ DD imagerel $LN16+62
	DD	imagerel $LN16+185
	DD	imagerel $chain$0$dnrm2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$dnrm2_ DD imagerel $LN16+185
	DD	imagerel $LN16+194
	DD	imagerel $chain$1$dnrm2_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$dnrm2_ DD 021H
	DD	imagerel $LN16
	DD	imagerel $LN16+62
	DD	imagerel $unwind$dnrm2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dnrm2_ DD 020521H
	DD	026805H
	DD	imagerel $LN16
	DD	imagerel $LN16+62
	DD	imagerel $unwind$dnrm2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dnrm2_ DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __mask@@AbsDouble@
CONST	SEGMENT
__mask@@AbsDouble@ DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT dnrm2_
_TEXT	SEGMENT
n$ = 64
x$ = 72
incx$ = 80
dnrm2_	PROC						; COMDAT
; Line 5
$LN16:
	sub	rsp, 56					; 00000038H
; Line 19
	mov	eax, DWORD PTR [rcx]
; Line 20
	movsxd	r9, DWORD PTR [r8]
; Line 22
	test	eax, eax
	jle	$LN10@dnrm2_
	test	r9d, r9d
	jle	$LN10@dnrm2_
; Line 24
	cmp	eax, 1
	jne	SHORT $LN9@dnrm2_
; Line 26
	movsdx	xmm0, QWORD PTR [rdx]
	andpd	xmm0, QWORD PTR __mask@@AbsDouble@
; Line 62
	add	rsp, 56					; 00000038H
	ret	0
$LN9@dnrm2_:
; Line 30
	xorpd	xmm2, xmm2
; Line 31
	movsdx	xmm4, QWORD PTR __real@3ff0000000000000
; Line 36
	dec	eax
	movaps	XMMWORD PTR [rsp+32], xmm6
	imul	eax, r9d
	movapd	xmm6, xmm2
	movapd	xmm1, xmm4
	movsxd	rcx, eax
	test	eax, eax
	js	SHORT $LN5@dnrm2_
	movsdx	xmm3, QWORD PTR __mask@@AbsDouble@
	npad	2
$LL7@dnrm2_:
; Line 38
	movsdx	xmm0, QWORD PTR [rdx+rcx*8]
	ucomisd	xmm0, xmm2
	jp	SHORT $LN15@dnrm2_
	je	SHORT $LN6@dnrm2_
$LN15@dnrm2_:
; Line 40
	andpd	xmm0, xmm3
; Line 41
	comisd	xmm0, xmm6
	jbe	SHORT $LN3@dnrm2_
; Line 43
	divsd	xmm6, xmm0
; Line 44
	mulsd	xmm6, xmm6
	mulsd	xmm6, xmm1
	movapd	xmm1, xmm6
; Line 45
	movapd	xmm6, xmm0
	addsd	xmm1, xmm4
; Line 47
	jmp	SHORT $LN6@dnrm2_
$LN3@dnrm2_:
; Line 49
	divsd	xmm0, xmm6
; Line 50
	mulsd	xmm0, xmm0
	addsd	xmm1, xmm0
$LN6@dnrm2_:
; Line 36
	sub	rcx, r9
	jns	SHORT $LL7@dnrm2_
$LN5@dnrm2_:
; Line 54
	movapd	xmm0, xmm1
	call	sqrt
	mulsd	xmm0, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+32]
; Line 62
	add	rsp, 56					; 00000038H
	ret	0
$LN10@dnrm2_:
; Line 60
	xorpd	xmm0, xmm0
; Line 62
	add	rsp, 56					; 00000038H
	ret	0
dnrm2_	ENDP
_TEXT	ENDS
END
