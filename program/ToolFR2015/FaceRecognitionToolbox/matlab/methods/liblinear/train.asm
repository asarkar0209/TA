; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	col_format_flag:DWORD
COMM	param:BYTE:030H
COMM	prob:BYTE:020H
COMM	cross_validation_flag:DWORD
COMM	x_space:QWORD
COMM	model_:QWORD
COMM	bias:QWORD
COMM	nr_fold:DWORD
_DATA	ENDS
PUBLIC	print_null
; Function compile flags: /Ogtp
;	COMDAT print_null
_TEXT	SEGMENT
s$ = 8
print_null PROC						; COMDAT
; File c:\users\brian c. becker\downloads\liblinear-1.7\liblinear-1.7\matlab\train.c
; Line 19
	ret	0
print_null ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FFP@BBLMOMHH@Usage?3?5model?5?$DN?5train?$CItraining_la@ ; `string'
PUBLIC	exit_with_help
EXTRN	mexPrintf:PROC
;	COMDAT ??_C@_0FFP@BBLMOMHH@Usage?3?5model?5?$DN?5train?$CItraining_la@
CONST	SEGMENT
??_C@_0FFP@BBLMOMHH@Usage?3?5model?5?$DN?5train?$CItraining_la@ DB 'Usage'
	DB	': model = train(training_label_vector, training_instance_matr'
	DB	'ix, ''liblinear_options'', ''col'');', 0aH, 'liblinear_option'
	DB	's:', 0aH, '-s type : set type of solver (default 1)', 0aH, 09H
	DB	'0 -- L2-regularized logistic regression (primal)', 0aH, 09H, '1'
	DB	' -- L2-regularized L2-loss support vector classification (dua'
	DB	'l)', 0aH, 09H, '2 -- L2-regularized L2-loss support vector cl'
	DB	'assification (primal)', 0aH, 09H, '3 -- L2-regularized L1-los'
	DB	's support vector classification (dual)', 0aH, 09H, '4 -- mult'
	DB	'i-class support vector classification by Crammer and Singer', 0aH
	DB	09H, '5 -- L1-regularized L2-loss support vector classificatio'
	DB	'n', 0aH, 09H, '6 -- L1-regularized logistic regression', 0aH, 09H
	DB	'7 -- L2-regularized logistic regression (dual)', 0aH, '-c cos'
	DB	't : set the parameter C (default 1)', 0aH, '-e epsilon : set '
	DB	'tolerance of termination criterion', 0aH, 09H, '-s 0 and 2', 0aH
	DB	09H, 09H, '|f''(w)|_2 <= eps*min(pos,neg)/l*|f''(w0)|_2,', 0aH
	DB	09H, 09H, 'where f is the primal function, (default 0.01)', 0aH
	DB	09H, '-s 1, 3, 4 and 7', 0aH, 09H, 09H, 'Dual maximal violatio'
	DB	'n <= eps; similar to libsvm (default 0.1)', 0aH, 09H, '-s 5 a'
	DB	'nd 6', 0aH, 09H, 09H, '|f''(w)|_inf <= eps*min(pos,neg)/l*|f'''
	DB	'(w0)|_inf,', 0aH, 09H, 09H, 'where f is the primal function ('
	DB	'default 0.01)', 0aH, '-B bias : if bias >= 0, instance x beco'
	DB	'mes [x; bias]; if < 0, no bias term added (default -1)', 0aH, '-'
	DB	'wi weight: weights adjust the parameter C of different classe'
	DB	's (see README for details)', 0aH, '-v n: n-fold cross validat'
	DB	'ion mode', 0aH, '-q : quiet mode (no outputs)', 0aH, 'col:', 0aH
	DB	09H, 'if ''col'' is setted, training_instance_matrix is parsed'
	DB	' in column format, otherwise is in row format', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT exit_with_help
_TEXT	SEGMENT
exit_with_help PROC					; COMDAT
; Line 51
	lea	rcx, OFFSET FLAT:??_C@_0FFP@BBLMOMHH@Usage?3?5model?5?$DN?5train?$CItraining_la@
; Line 52
	jmp	mexPrintf
exit_with_help ENDP
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	??_C@_0CC@JEMHMAKE@Cross?5Validation?5Accuracy?5?$DN?5?$CFg?$CF?$CF@ ; `string'
PUBLIC	do_cross_validation
EXTRN	__imp_free:PROC
EXTRN	cross_validation:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_cross_validation DD imagerel $LN9
	DD	imagerel $LN9+211
	DD	imagerel $unwind$do_cross_validation
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_cross_validation DD 061601H
	DD	026816H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_C@_0CC@JEMHMAKE@Cross?5Validation?5Accuracy?5?$DN?5?$CFg?$CF?$CF@
CONST	SEGMENT
??_C@_0CC@JEMHMAKE@Cross?5Validation?5Accuracy?5?$DN?5?$CFg?$CF?$CF@ DB 'C'
	DB	'ross Validation Accuracy = %g%%', 0aH, 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT do_cross_validation
_TEXT	SEGMENT
do_cross_validation PROC				; COMDAT
; Line 65
$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
; Line 68
	movsxd	rcx, DWORD PTR prob
	movaps	XMMWORD PTR [rsp+32], xmm6
	xor	ebx, ebx
	shl	rcx, 2
	call	QWORD PTR __imp_malloc
; Line 71
	mov	r8d, DWORD PTR nr_fold
	lea	rdx, OFFSET FLAT:param
	lea	rcx, OFFSET FLAT:prob
	mov	r9, rax
	mov	rdi, rax
	call	cross_validation
; Line 73
	mov	r11d, DWORD PTR prob
	test	r11d, r11d
	jle	SHORT $LN2@do_cross_v
	mov	r8, QWORD PTR prob+8
	mov	rcx, rdi
	mov	rdx, r11
	sub	r8, rdi
	npad	2
$LL4@do_cross_v:
; Line 74
	mov	eax, DWORD PTR [r8+rcx]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN3@do_cross_v
; Line 75
	inc	ebx
$LN3@do_cross_v:
; Line 73
	add	rcx, 4
	sub	rdx, 1
	jne	SHORT $LL4@do_cross_v
$LN2@do_cross_v:
; Line 76
	movd	xmm2, r11d
	movd	xmm6, ebx
	lea	rcx, OFFSET FLAT:??_C@_0CC@JEMHMAKE@Cross?5Validation?5Accuracy?5?$DN?5?$CFg?$CF?$CF@
	cvtdq2pd xmm2, xmm2
	cvtdq2pd xmm6, xmm6
	mulsd	xmm6, QWORD PTR __real@4059000000000000
	movapd	xmm1, xmm6
	divsd	xmm1, xmm2
	movd	rdx, xmm1
	call	mexPrintf
; Line 77
	movd	xmm5, DWORD PTR prob
; Line 79
	mov	rcx, rdi
	cvtdq2pd xmm5, xmm5
	divsd	xmm6, xmm5
	call	QWORD PTR __imp_free
; Line 81
	mov	rbx, QWORD PTR [rsp+64]
	movapd	xmm0, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+32]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
do_cross_validation ENDP
_TEXT	ENDS
PUBLIC	__real@3fb999999999999a
PUBLIC	??_C@_0BA@NEBHDGFC@unknown?5option?6?$AA@	; `string'
PUBLIC	__real@3f847ae147ae147b
PUBLIC	??_C@_0CG@IBLLEENI@n?9fold?5cross?5validation?3?5n?5must?5@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_03HNOLNALI@col?$AA@			; `string'
PUBLIC	__real@bff0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	parse_command_line
EXTRN	__GSHandlerCheck:PROC
EXTRN	set_print_string_function:PROC
EXTRN	__imp_realloc:PROC
EXTRN	__imp_atof:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__imp_strtok:PROC
EXTRN	mxGetString_730:PROC
EXTRN	mxGetN:PROC
EXTRN	__imp__HUGE:QWORD
EXTRN	__security_cookie:QWORD
EXTRN	__security_check_cookie:PROC
EXTRN	__chkstk:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_command_line DD imagerel $LN50
	DD	imagerel $LN50+150
	DD	imagerel $unwind$parse_command_line
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$parse_command_line DD imagerel $LN50+150
	DD	imagerel $LN50+885
	DD	imagerel $chain$2$parse_command_line
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$parse_command_line DD imagerel $LN50+885
	DD	imagerel $LN50+913
	DD	imagerel $chain$3$parse_command_line
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$parse_command_line DD imagerel $LN50+913
	DD	imagerel $LN50+1030
	DD	imagerel $chain$4$parse_command_line
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$parse_command_line DD 060021H
	DD	050dd400H
	DD	050c7400H
	DD	050a6400H
	DD	imagerel $LN50
	DD	imagerel $LN50+150
	DD	imagerel $unwind$parse_command_line
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$parse_command_line DD 021H
	DD	imagerel $LN50
	DD	imagerel $LN50+150
	DD	imagerel $unwind$parse_command_line
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$parse_command_line DD 06c721H
	DD	050dd4c7H
	DD	050c7410H
	DD	050a6408H
	DD	imagerel $LN50
	DD	imagerel $LN50+150
	DD	imagerel $unwind$parse_command_line
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_command_line DD 052419H
	DD	05060112H
	DD	05003c005H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	02820H
xdata	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT ??_C@_0BA@NEBHDGFC@unknown?5option?6?$AA@
CONST	SEGMENT
??_C@_0BA@NEBHDGFC@unknown?5option?6?$AA@ DB 'unknown option', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT ??_C@_0CG@IBLLEENI@n?9fold?5cross?5validation?3?5n?5must?5@
CONST	SEGMENT
??_C@_0CG@IBLLEENI@n?9fold?5cross?5validation?3?5n?5must?5@ DB 'n-fold cr'
	DB	'oss validation: n must >= 2', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HNOLNALI@col?$AA@
CONST	SEGMENT
??_C@_03HNOLNALI@col?$AA@ DB 'col', 00H			; `string'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT parse_command_line
_TEXT	SEGMENT
argv$ = 32
cmd$ = 8224
__$ArrayPad$ = 10272
nrhs$ = 10320
prhs$ = 10328
model_file_name$ = 10336
parse_command_line PROC					; COMDAT
; Line 85
$LN50:
	push	rbx
	push	rbp
	push	r12
	mov	eax, 10288				; 00002830H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 93
	movsdx	xmm0, QWORD PTR __real@3ff0000000000000
; Line 94
	mov	rax, QWORD PTR __imp__HUGE
	xor	r12d, r12d
	mov	ebx, 1
	movsdx	QWORD PTR param+16, xmm0
; Line 100
	movsdx	xmm0, QWORD PTR __real@bff0000000000000
; Line 103
	cmp	ecx, ebx
	mov	DWORD PTR param, ebx
	mov	rbp, rdx
	movsdx	xmm1, QWORD PTR [rax]
	movsdx	QWORD PTR bias, xmm0
	mov	DWORD PTR param+24, r12d
	mov	QWORD PTR param+32, r12
	mov	QWORD PTR param+40, r12
	movsdx	QWORD PTR param+8, xmm1
	mov	DWORD PTR cross_validation_flag, r12d
	mov	DWORD PTR col_format_flag, r12d
	jg	SHORT $LN32@parse_comm
; Line 104
	mov	eax, ebx
	jmp	$LN33@parse_comm
$LN32@parse_comm:
	mov	QWORD PTR [rsp+10320], rsi
	mov	QWORD PTR [rsp+10336], rdi
; Line 106
	cmp	ecx, 4
	jne	SHORT $LN30@parse_comm
; Line 108
	mov	rcx, QWORD PTR [rdx+24]
	call	mxGetN
	mov	rcx, QWORD PTR [rbp+24]
	lea	rdx, QWORD PTR cmd$[rsp]
	lea	r8, QWORD PTR [rax+1]
	call	mxGetString_730
; Line 109
	lea	rsi, QWORD PTR cmd$[rsp]
	lea	rdi, OFFSET FLAT:??_C@_03HNOLNALI@col?$AA@
	mov	ecx, 4
	repe cmpsb
	jne	SHORT $LN41@parse_comm
; Line 110
	mov	DWORD PTR col_format_flag, ebx
; Line 114
	jmp	SHORT $LN41@parse_comm
$LN30@parse_comm:
	cmp	ecx, 2
	jle	SHORT $LN44@parse_comm
$LN41@parse_comm:
; Line 116
	mov	rcx, QWORD PTR [rbp+16]
	call	mxGetN
	mov	rcx, QWORD PTR [rbp+16]
	lea	rdx, QWORD PTR cmd$[rsp]
	lea	r8, QWORD PTR [rax+1]
	call	mxGetString_730
; Line 117
	lea	rdx, OFFSET FLAT:??_C@_01CLKCMJKC@?5?$AA@
	lea	rcx, QWORD PTR cmd$[rsp]
	call	QWORD PTR __imp_strtok
	mov	QWORD PTR argv$[rsp+8], rax
	test	rax, rax
	je	SHORT $LN44@parse_comm
; Line 116
	lea	rdi, QWORD PTR argv$[rsp+8]
$LL27@parse_comm:
; Line 118
	lea	rdx, OFFSET FLAT:??_C@_01CLKCMJKC@?5?$AA@
	xor	ecx, ecx
	inc	ebx
	add	rdi, 8
	call	QWORD PTR __imp_strtok
	mov	QWORD PTR [rdi], rax
	test	rax, rax
	jne	SHORT $LL27@parse_comm
$LN44@parse_comm:
; Line 123
	mov	edi, 1
; Line 127
	movsxd	rbp, ebx
	mov	QWORD PTR [rsp+10344], r13
	cmp	rdi, rbp
	jge	$LN23@parse_comm
	lea	rsi, QWORD PTR argv$[rsp]
	lea	r13, OFFSET FLAT:__ImageBase
$LL25@parse_comm:
	mov	rax, QWORD PTR argv$[rsp+rdi*8]
	cmp	BYTE PTR [rax], 45			; 0000002dH
	jne	$LN23@parse_comm
	inc	rdi
	add	rsi, 8
	cmp	rdi, rbp
	jl	SHORT $LN21@parse_comm
	mov	rax, QWORD PTR [rsi]
	cmp	BYTE PTR [rax+1], 113			; 00000071H
	jne	$LN38@parse_comm
$LN21@parse_comm:
; Line 129
	mov	rbx, QWORD PTR [rsi]
	movsx	eax, BYTE PTR [rbx+1]
	add	eax, -66				; ffffffffffffffbeH
	cmp	eax, 53					; 00000035H
	ja	$LN10@parse_comm
	cdqe
	movzx	eax, BYTE PTR $LN42@parse_comm[r13+rax]
	mov	ecx, DWORD PTR $LN43@parse_comm[r13+rax*4]
	add	rcx, r13
	jmp	rcx
$LN18@parse_comm:
; Line 132
	mov	rcx, QWORD PTR argv$[rsp+rdi*8]
	call	QWORD PTR __imp_atoi
	mov	DWORD PTR param, eax
; Line 133
	jmp	$LN24@parse_comm
$LN17@parse_comm:
; Line 135
	mov	rcx, QWORD PTR argv$[rsp+rdi*8]
	call	QWORD PTR __imp_atof
	movsdx	QWORD PTR param+16, xmm0
; Line 136
	jmp	$LN24@parse_comm
$LN16@parse_comm:
; Line 138
	mov	rcx, QWORD PTR argv$[rsp+rdi*8]
	call	QWORD PTR __imp_atof
	movsdx	QWORD PTR param+8, xmm0
; Line 139
	jmp	$LN24@parse_comm
$LN15@parse_comm:
; Line 141
	mov	rcx, QWORD PTR argv$[rsp+rdi*8]
	call	QWORD PTR __imp_atof
	movsdx	QWORD PTR bias, xmm0
; Line 142
	jmp	$LN24@parse_comm
$LN14@parse_comm:
; Line 145
	mov	rcx, QWORD PTR argv$[rsp+rdi*8]
	mov	DWORD PTR cross_validation_flag, 1
	call	QWORD PTR __imp_atoi
; Line 146
	cmp	eax, 2
	mov	DWORD PTR nr_fold, eax
	jge	$LN24@parse_comm
; Line 148
	lea	rcx, OFFSET FLAT:??_C@_0CG@IBLLEENI@n?9fold?5cross?5validation?3?5n?5must?5@
	call	mexPrintf
; Line 149
	mov	eax, 1
	jmp	$LN48@parse_comm
$LN12@parse_comm:
; Line 153
	mov	eax, DWORD PTR param+24
; Line 154
	mov	rcx, QWORD PTR param+32
	inc	eax
	movsxd	rdx, eax
	mov	DWORD PTR param+24, eax
	shl	rdx, 2
	call	QWORD PTR __imp_realloc
; Line 155
	movsxd	rdx, DWORD PTR param+24
	mov	rcx, QWORD PTR param+40
	shl	rdx, 3
	mov	QWORD PTR param+32, rax
	call	QWORD PTR __imp_realloc
; Line 156
	lea	rcx, QWORD PTR [rbx+2]
	mov	QWORD PTR param+40, rax
	call	QWORD PTR __imp_atoi
	mov	rcx, QWORD PTR param+32
	movsxd	rdx, DWORD PTR param+24
	mov	DWORD PTR [rcx+rdx*4-4], eax
; Line 157
	mov	rcx, QWORD PTR argv$[rsp+rdi*8]
	call	QWORD PTR __imp_atof
	movsxd	rcx, DWORD PTR param+24
	mov	rax, QWORD PTR param+40
	movsdx	QWORD PTR [rax+rcx*8-8], xmm0
; Line 158
	jmp	SHORT $LN24@parse_comm
$LN11@parse_comm:
; Line 161
	dec	rdi
	lea	r12, OFFSET FLAT:print_null
	sub	rsi, 8
$LN24@parse_comm:
	inc	rdi
	add	rsi, 8
	cmp	rdi, rbp
	jl	$LL25@parse_comm
$LN23@parse_comm:
; Line 169
	mov	rcx, r12
	call	set_print_string_function
; Line 171
	mov	rdx, QWORD PTR __imp__HUGE
	movsdx	xmm0, QWORD PTR param+8
	ucomisd	xmm0, QWORD PTR [rdx]
	jp	SHORT $LN2@parse_comm
	jne	SHORT $LN2@parse_comm
; Line 173
	mov	eax, DWORD PTR param
	test	eax, eax
	je	SHORT $LN7@parse_comm
	cmp	eax, 2
	je	SHORT $LN7@parse_comm
; Line 175
	cmp	eax, 1
	je	SHORT $LN4@parse_comm
	cmp	eax, 3
	je	SHORT $LN4@parse_comm
	cmp	eax, 4
	je	SHORT $LN4@parse_comm
	cmp	eax, 7
	je	SHORT $LN4@parse_comm
; Line 177
	cmp	eax, 5
	je	SHORT $LN7@parse_comm
	cmp	eax, 6
	jne	SHORT $LN2@parse_comm
$LN7@parse_comm:
; Line 174
	movsdx	xmm0, QWORD PTR __real@3f847ae147ae147b
$LN49@parse_comm:
	movsdx	QWORD PTR param+8, xmm0
$LN2@parse_comm:
; Line 180
	xor	eax, eax
$LN48@parse_comm:
	mov	r13, QWORD PTR [rsp+10344]
	mov	rsi, QWORD PTR [rsp+10320]
	mov	rdi, QWORD PTR [rsp+10336]
$LN33@parse_comm:
; Line 181
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 10288				; 00002830H
	pop	r12
	pop	rbp
	pop	rbx
	ret	0
$LN10@parse_comm:
; Line 164
	lea	rcx, OFFSET FLAT:??_C@_0BA@NEBHDGFC@unknown?5option?6?$AA@
	call	mexPrintf
$LN38@parse_comm:
; Line 165
	mov	eax, 1
	jmp	SHORT $LN48@parse_comm
$LN4@parse_comm:
; Line 176
	movsdx	xmm0, QWORD PTR __real@3fb999999999999a
	jmp	SHORT $LN49@parse_comm
	npad	2
$LN43@parse_comm:
; Line 181
	DD	$LN15@parse_comm
	DD	$LN17@parse_comm
	DD	$LN16@parse_comm
	DD	$LN11@parse_comm
	DD	$LN18@parse_comm
	DD	$LN14@parse_comm
	DD	$LN12@parse_comm
	DD	$LN10@parse_comm
$LN42@parse_comm:
	DB	0
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	1
	DB	7
	DB	2
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	3
	DB	7
	DB	4
	DB	7
	DB	7
	DB	5
	DB	6
parse_command_line ENDP
_TEXT	ENDS
EXTRN	mxCreateDoubleMatrix_730:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$fake_answer DD imagerel fake_answer
	DD	imagerel fake_answer+30
	DD	imagerel $unwind$fake_answer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fake_answer DD 020601H
	DD	030023206H
; Function compile flags: /Ogtp
xdata	ENDS
;	COMDAT fake_answer
_TEXT	SEGMENT
plhs$ = 48
fake_answer PROC					; COMDAT
; Line 184
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 185
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	mxCreateDoubleMatrix_730
	mov	QWORD PTR [rbx], rax
; Line 186
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
fake_answer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@OBEGDGFM@Length?5of?5label?5vector?5does?5not?5@ ; `string'
PUBLIC	??_C@_0DC@GGFBFHBI@Error?3?5cannot?5transpose?5training@ ; `string'
PUBLIC	??_C@_09KDFGPPLL@transpose?$AA@			; `string'
PUBLIC	read_problem_sparse
EXTRN	mxGetNzmax_730:PROC
EXTRN	mxGetJc_730:PROC
EXTRN	mxGetIr_730:PROC
EXTRN	mxGetPr:PROC
EXTRN	mxGetM:PROC
EXTRN	mxDestroyArray:PROC
EXTRN	mexCallMATLAB:PROC
EXTRN	mxDuplicateArray:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_problem_sparse DD imagerel $LN29
	DD	imagerel $LN29+189
	DD	imagerel $unwind$read_problem_sparse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$read_problem_sparse DD imagerel $LN29+189
	DD	imagerel $LN29+421
	DD	imagerel $chain$2$read_problem_sparse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$read_problem_sparse DD imagerel $LN29+421
	DD	imagerel $LN29+990
	DD	imagerel $chain$4$read_problem_sparse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$read_problem_sparse DD imagerel $LN29+990
	DD	imagerel $LN29+1014
	DD	imagerel $chain$5$read_problem_sparse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$read_problem_sparse DD imagerel $LN29+1014
	DD	imagerel $LN29+1049
	DD	imagerel $chain$6$read_problem_sparse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$read_problem_sparse DD 021H
	DD	imagerel $LN29
	DD	imagerel $LN29+189
	DD	imagerel $unwind$read_problem_sparse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$read_problem_sparse DD 021H
	DD	imagerel $LN29+189
	DD	imagerel $LN29+421
	DD	imagerel $chain$2$read_problem_sparse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$read_problem_sparse DD 040d21H
	DD	0be40dH
	DD	0cd405H
	DD	imagerel $LN29+189
	DD	imagerel $LN29+421
	DD	imagerel $chain$2$read_problem_sparse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$read_problem_sparse DD 061521H
	DD	0af415H
	DD	0dc410H
	DD	0125408H
	DD	imagerel $LN29
	DD	imagerel $LN29+189
	DD	imagerel $unwind$read_problem_sparse
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_problem_sparse DD 040801H
	DD	07004d208H
	DD	030026003H
xdata	ENDS
;	COMDAT ??_C@_0DH@OBEGDGFM@Length?5of?5label?5vector?5does?5not?5@
CONST	SEGMENT
??_C@_0DH@OBEGDGFM@Length?5of?5label?5vector?5does?5not?5@ DB 'Length of '
	DB	'label vector does not match # of instances.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GGFBFHBI@Error?3?5cannot?5transpose?5training@
CONST	SEGMENT
??_C@_0DC@GGFBFHBI@Error?3?5cannot?5transpose?5training@ DB 'Error: canno'
	DB	't transpose training instance matrix', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KDFGPPLL@transpose?$AA@
CONST	SEGMENT
??_C@_09KDFGPPLL@transpose?$AA@ DB 'transpose', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT read_problem_sparse
_TEXT	SEGMENT
tv129 = 48
prhs$5982 = 48
samples$1$ = 56
plhs$5983 = 64
label_vec$ = 144
instance_mat$ = 152
ir$1$ = 160
labels$1$ = 168
read_problem_sparse PROC				; COMDAT
; Line 189
$LN29:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 112				; 00000070H
; Line 196
	xor	edi, edi
	mov	rsi, rdx
	mov	rbx, rcx
	mov	QWORD PTR prob+16, rdi
; Line 197
	mov	QWORD PTR prob+8, rdi
; Line 198
	mov	QWORD PTR x_space, rdi
; Line 200
	cmp	DWORD PTR col_format_flag, edi
	jne	SHORT $LN12@read_probl
; Line 206
	mov	rcx, rdx
	call	mxDuplicateArray
; Line 207
	mov	r8d, 1
	lea	r9, QWORD PTR prhs$5982[rsp]
	mov	QWORD PTR prhs$5982[rsp], rax
	lea	rax, OFFSET FLAT:??_C@_09KDFGPPLL@transpose?$AA@
	lea	rdx, QWORD PTR plhs$5983[rsp]
	mov	ecx, r8d
	mov	QWORD PTR [rsp+32], rax
	call	mexCallMATLAB
	test	eax, eax
	je	SHORT $LN11@read_probl
; Line 209
	lea	rcx, OFFSET FLAT:??_C@_0DC@GGFBFHBI@Error?3?5cannot?5transpose?5training@
	call	mexPrintf
; Line 210
	or	eax, -1
; Line 270
	add	rsp, 112				; 00000070H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN11@read_probl:
; Line 213
	mov	rcx, QWORD PTR prhs$5982[rsp]
	mov	rsi, QWORD PTR plhs$5983[rsp]
	call	mxDestroyArray
$LN12@read_probl:
; Line 217
	mov	rcx, rsi
	call	mxGetN
; Line 218
	mov	rcx, rbx
	mov	DWORD PTR prob, eax
	call	mxGetM
; Line 220
	cmp	eax, DWORD PTR prob
	je	SHORT $LN10@read_probl
; Line 222
	lea	rcx, OFFSET FLAT:??_C@_0DH@OBEGDGFM@Length?5of?5label?5vector?5does?5not?5@
	call	mexPrintf
; Line 223
	or	eax, -1
; Line 270
	add	rsp, 112				; 00000070H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN10@read_probl:
	mov	QWORD PTR [rsp+144], rbp
; Line 227
	mov	rcx, rbx
	mov	QWORD PTR [rsp+104], r12
	mov	QWORD PTR [rsp+80], r15
	call	mxGetPr
; Line 228
	mov	rcx, rsi
	mov	QWORD PTR labels$1$[rsp], rax
	call	mxGetPr
; Line 229
	mov	rcx, rsi
	mov	r12, rax
	mov	QWORD PTR samples$1$[rsp], rax
	call	mxGetIr_730
; Line 230
	mov	rcx, rsi
	mov	QWORD PTR ir$1$[rsp], rax
	call	mxGetJc_730
; Line 232
	mov	rcx, rsi
	mov	rbp, rax
	call	mxGetNzmax_730
; Line 234
	mov	edx, DWORD PTR prob
; Line 235
	mov	rcx, rsi
	lea	ebx, DWORD PTR [rax+rdx*2]
	call	mxGetM
; Line 237
	movsxd	rcx, DWORD PTR prob
	shl	rcx, 2
	mov	rsi, rax
	mov	QWORD PTR tv129[rsp], rax
	call	QWORD PTR __imp_malloc
; Line 238
	movsxd	rcx, DWORD PTR prob
	shl	rcx, 3
	mov	QWORD PTR prob+8, rax
	call	QWORD PTR __imp_malloc
; Line 239
	movsxd	rcx, ebx
	shl	rcx, 4
	mov	QWORD PTR prob+16, rax
	call	QWORD PTR __imp_malloc
; Line 244
	cmp	DWORD PTR prob, edi
	mov	r15d, edi
	movsdx	xmm0, QWORD PTR bias
	xorpd	xmm1, xmm1
	mov	QWORD PTR x_space, rax
	mov	r10, rdi
	movsdx	QWORD PTR prob+24, xmm0
	jle	$LN7@read_probl
	mov	rdx, QWORD PTR labels$1$[rsp]
	mov	rsi, QWORD PTR ir$1$[rsp]
	mov	QWORD PTR [rsp+96], r13
	sub	rdx, rbp
	mov	QWORD PTR [rsp+88], r14
	mov	r13, rdi
	mov	QWORD PTR labels$1$[rsp], rdx
	mov	r14, rdi
$LL9@read_probl:
; Line 246
	movsxd	rcx, edi
	shl	rcx, 4
	add	rcx, rax
	mov	rax, QWORD PTR prob+16
	mov	QWORD PTR [r13+rax], rcx
; Line 247
	mov	rax, QWORD PTR prob+8
	cvttsd2si ecx, QWORD PTR [rdx+rbp]
	mov	DWORD PTR [r14+rax], ecx
; Line 248
	movsxd	r11, DWORD PTR [rbp]
	movsxd	r9, DWORD PTR [rbp+8]
; Line 249
	cmp	r11, r9
	jge	$LN20@read_probl
	mov	rax, r9
	sub	rax, r11
	cmp	rax, 4
	jl	$LC21@read_probl
	mov	rax, QWORD PTR ir$1$[rsp]
	lea	r8, QWORD PTR [r12+r11*8+8]
	mov	rdx, r10
	lea	rbx, QWORD PTR [rax+r11*8+24]
	mov	r12, rax
	mov	rsi, r9
	sub	r12, QWORD PTR samples$1$[rsp]
	sub	rsi, r11
	shl	rdx, 4
	sub	rsi, 4
	shr	rsi, 2
	inc	rsi
	lea	rax, QWORD PTR [rsi*4]
	lea	edi, DWORD PTR [rdi+rsi*4]
	add	r11, rax
	add	r10, rax
	npad	6
$LL22@read_probl:
; Line 251
	mov	ecx, DWORD PTR [rbx-24]
	mov	rax, QWORD PTR x_space
; Line 252
	add	rdx, 64					; 00000040H
	inc	ecx
	add	r8, 32					; 00000020H
	add	rbx, 32					; 00000020H
	mov	DWORD PTR [rdx+rax-64], ecx
	mov	rcx, QWORD PTR [r8-40]
	mov	rax, QWORD PTR x_space
	mov	QWORD PTR [rdx+rax-56], rcx
	mov	ecx, DWORD PTR [r12+r8-32]
	mov	rax, QWORD PTR x_space
	inc	ecx
	mov	DWORD PTR [rdx+rax-48], ecx
	mov	rcx, QWORD PTR [r8-32]
	mov	rax, QWORD PTR x_space
	mov	QWORD PTR [rdx+rax-40], rcx
	mov	ecx, DWORD PTR [rbx-40]
	mov	rax, QWORD PTR x_space
	inc	ecx
	mov	DWORD PTR [rdx+rax-32], ecx
	mov	rcx, QWORD PTR [r8-24]
	mov	rax, QWORD PTR x_space
	mov	QWORD PTR [rdx+rax-24], rcx
	mov	ecx, DWORD PTR [rbx-32]
	mov	rax, QWORD PTR x_space
	inc	ecx
	sub	rsi, 1
	mov	DWORD PTR [rdx+rax-16], ecx
	mov	rcx, QWORD PTR [r8-16]
	mov	rax, QWORD PTR x_space
	mov	QWORD PTR [rdx+rax-8], rcx
	jne	$LL22@read_probl
	mov	r12, QWORD PTR samples$1$[rsp]
	mov	rsi, QWORD PTR ir$1$[rsp]
$LC21@read_probl:
; Line 249
	cmp	r11, r9
	jge	SHORT $LN20@read_probl
	mov	rdx, r10
	sub	r9, r11
	mov	rbx, rsi
	shl	rdx, 4
	sub	rbx, r12
	add	edi, r9d
	add	r10, r9
	lea	r8, QWORD PTR [r12+r11*8]
$LC6@read_probl:
; Line 251
	mov	ecx, DWORD PTR [rbx+r8]
	mov	rax, QWORD PTR x_space
; Line 253
	add	rdx, 16
	inc	ecx
	add	r8, 8
	sub	r9, 1
	mov	DWORD PTR [rdx+rax-16], ecx
	mov	rcx, QWORD PTR [r8-8]
	mov	rax, QWORD PTR x_space
	mov	QWORD PTR [rdx+rax-8], rcx
	jne	SHORT $LC6@read_probl
$LN20@read_probl:
; Line 255
	movsdx	xmm0, QWORD PTR prob+24
	comisd	xmm0, xmm1
	jb	SHORT $LN3@read_probl
; Line 257
	mov	rax, QWORD PTR x_space
	mov	rcx, QWORD PTR tv129[rsp]
	mov	rdx, r10
	add	rdx, rdx
	inc	ecx
; Line 259
	inc	edi
	mov	DWORD PTR [rax+rdx*8], ecx
	mov	rax, QWORD PTR x_space
	inc	r10
	movsdx	xmm0, QWORD PTR prob+24
	movsdx	QWORD PTR [rax+rdx*8+8], xmm0
$LN3@read_probl:
; Line 261
	mov	rax, QWORD PTR x_space
	mov	rcx, r10
	inc	r15d
	add	rcx, rcx
	inc	edi
	inc	r10
	add	r14, 4
	add	r13, 8
	add	rbp, 8
	mov	DWORD PTR [rax+rcx*8], -1
	cmp	r15d, DWORD PTR prob
	jge	SHORT $LN28@read_probl
	mov	rax, QWORD PTR x_space
	mov	rdx, QWORD PTR labels$1$[rsp]
	jmp	$LL9@read_probl
$LN28@read_probl:
; Line 244
	movsdx	xmm0, QWORD PTR prob+24
	mov	rsi, QWORD PTR tv129[rsp]
	mov	r14, QWORD PTR [rsp+88]
	mov	r13, QWORD PTR [rsp+96]
$LN7@read_probl:
; Line 264
	comisd	xmm0, xmm1
	mov	r15, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+144]
	jb	SHORT $LN2@read_probl
; Line 265
	lea	eax, DWORD PTR [rsi+1]
	mov	DWORD PTR prob+4, eax
; Line 269
	xor	eax, eax
; Line 270
	add	rsp, 112				; 00000070H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN2@read_probl:
; Line 267
	mov	DWORD PTR prob+4, esi
; Line 269
	xor	eax, eax
; Line 270
	add	rsp, 112				; 00000070H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
read_problem_sparse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DI@DIKPDILO@Error?3?5label?5vector?5and?5instance@ ; `string'
PUBLIC	??_C@_0CJ@HOHJOFML@Training_instance_matrix?5must?5be@ ; `string'
PUBLIC	??_C@_0L@DCCGFMBN@Error?3?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_0DL@BMCGJGFA@Error?3?5can?8t?5convert?5libsvm?5mode@ ; `string'
PUBLIC	mexFunction
EXTRN	free_and_destroy_model:PROC
EXTRN	model_to_matlab_structure:PROC
EXTRN	train:PROC
EXTRN	check_parameter:PROC
EXTRN	mxIsSparse:PROC
EXTRN	destroy_param:PROC
EXTRN	mxIsDouble:PROC
EXTRN	__imp_srand:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mexFunction DD imagerel $LN34
	DD	imagerel $LN34+517
	DD	imagerel $unwind$mexFunction
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mexFunction DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0DI@DIKPDILO@Error?3?5label?5vector?5and?5instance@
CONST	SEGMENT
??_C@_0DI@DIKPDILO@Error?3?5label?5vector?5and?5instance@ DB 'Error: labe'
	DB	'l vector and instance matrix must be double', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HOHJOFML@Training_instance_matrix?5must?5be@
CONST	SEGMENT
??_C@_0CJ@HOHJOFML@Training_instance_matrix?5must?5be@ DB 'Training_insta'
	DB	'nce_matrix must be sparse', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DCCGFMBN@Error?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0L@DCCGFMBN@Error?3?5?$CFs?6?$AA@ DB 'Error: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@BMCGJGFA@Error?3?5can?8t?5convert?5libsvm?5mode@
CONST	SEGMENT
??_C@_0DL@BMCGJGFA@Error?3?5can?8t?5convert?5libsvm?5mode@ DB 'Error: can'
	DB	'''t convert libsvm model to matrix structure: %s', 0aH, 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT mexFunction
_TEXT	SEGMENT
nlhs$ = 48
plhs$ = 56
nrhs$ = 64
prhs$ = 72
mexFunction PROC					; COMDAT
; Line 276
$LN34:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 280
	mov	ecx, 1
	mov	rbx, r9
	mov	esi, r8d
	mov	rdi, rdx
	call	QWORD PTR __imp_srand
; Line 283
	lea	r11d, DWORD PTR [rsi-2]
	cmp	r11d, 2
	ja	$LN13@mexFunctio
; Line 287
	mov	rcx, QWORD PTR [rbx]
	call	mxIsDouble
	test	al, al
	je	$LN11@mexFunctio
	mov	rcx, QWORD PTR [rbx+8]
	call	mxIsDouble
	test	al, al
	je	$LN11@mexFunctio
; Line 293
	xor	r8d, r8d
	mov	rdx, rbx
	mov	ecx, esi
	call	parse_command_line
	test	eax, eax
	je	SHORT $LN10@mexFunctio
; Line 295
	lea	rcx, OFFSET FLAT:??_C@_0FFP@BBLMOMHH@Usage?3?5model?5?$DN?5train?$CItraining_la@
$LN33@mexFunctio:
	call	mexPrintf
; Line 296
	lea	rcx, OFFSET FLAT:param
	call	destroy_param
; Line 298
	jmp	$LN31@mexFunctio
$LN10@mexFunctio:
; Line 301
	mov	rcx, QWORD PTR [rbx+8]
	call	mxIsSparse
	test	al, al
	je	$LN9@mexFunctio
; Line 302
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rbx]
	call	read_problem_sparse
; Line 312
	lea	rdx, OFFSET FLAT:param
	lea	rcx, OFFSET FLAT:prob
	mov	ebx, eax
	call	check_parameter
; Line 314
	test	ebx, ebx
	jne	$LN6@mexFunctio
	test	rax, rax
	jne	$LN30@mexFunctio
; Line 326
	cmp	DWORD PTR cross_validation_flag, eax
	je	SHORT $LN4@mexFunctio
; Line 329
	mov	edx, 1
	xor	r8d, r8d
	mov	rcx, rdx
	call	mxCreateDoubleMatrix_730
; Line 330
	mov	rcx, rax
	mov	QWORD PTR [rdi], rax
	call	mxGetPr
	mov	rbx, rax
; Line 331
	call	do_cross_validation
	movsdx	QWORD PTR [rbx], xmm0
; Line 333
	jmp	SHORT $LN3@mexFunctio
$LN4@mexFunctio:
; Line 337
	lea	rdx, OFFSET FLAT:param
	lea	rcx, OFFSET FLAT:prob
	call	train
; Line 338
	mov	rcx, rdi
	mov	rdx, rax
	mov	QWORD PTR model_, rax
	call	model_to_matlab_structure
; Line 339
	test	rax, rax
	je	SHORT $LN2@mexFunctio
; Line 340
	lea	rcx, OFFSET FLAT:??_C@_0DL@BMCGJGFA@Error?3?5can?8t?5convert?5libsvm?5mode@
	mov	rdx, rax
	call	mexPrintf
$LN2@mexFunctio:
; Line 341
	lea	rcx, OFFSET FLAT:model_
	call	free_and_destroy_model
$LN3@mexFunctio:
; Line 343
	lea	rcx, OFFSET FLAT:param
	call	destroy_param
; Line 344
	mov	rcx, QWORD PTR prob+8
	call	QWORD PTR __imp_free
; Line 345
	mov	rcx, QWORD PTR prob+16
	call	QWORD PTR __imp_free
; Line 346
	mov	rcx, QWORD PTR x_space
; Line 354
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	rex_jmp	QWORD PTR __imp_free
$LN6@mexFunctio:
; Line 316
	test	rax, rax
	je	SHORT $LN5@mexFunctio
$LN30@mexFunctio:
; Line 317
	lea	rcx, OFFSET FLAT:??_C@_0L@DCCGFMBN@Error?3?5?$CFs?6?$AA@
	mov	rdx, rax
	call	mexPrintf
$LN5@mexFunctio:
; Line 318
	lea	rcx, OFFSET FLAT:param
	call	destroy_param
; Line 319
	mov	rcx, QWORD PTR prob+8
	call	QWORD PTR __imp_free
; Line 320
	mov	rcx, QWORD PTR prob+16
	call	QWORD PTR __imp_free
; Line 321
	mov	rcx, QWORD PTR x_space
	call	QWORD PTR __imp_free
; Line 323
	jmp	SHORT $LN31@mexFunctio
$LN9@mexFunctio:
; Line 305
	lea	rcx, OFFSET FLAT:??_C@_0CJ@HOHJOFML@Training_instance_matrix?5must?5be@
; Line 308
	jmp	$LN33@mexFunctio
$LN11@mexFunctio:
; Line 288
	lea	rcx, OFFSET FLAT:??_C@_0DI@DIKPDILO@Error?3?5label?5vector?5and?5instance@
; Line 290
	jmp	SHORT $LN32@mexFunctio
$LN13@mexFunctio:
; Line 350
	lea	rcx, OFFSET FLAT:??_C@_0FFP@BBLMOMHH@Usage?3?5model?5?$DN?5train?$CItraining_la@
$LN32@mexFunctio:
	call	mexPrintf
$LN31@mexFunctio:
; Line 351
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	mxCreateDoubleMatrix_730
; Line 354
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rdi], rax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
mexFunction ENDP
_TEXT	ENDS
END
